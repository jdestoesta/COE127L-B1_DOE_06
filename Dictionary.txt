a b c d e f g h i j k l m n o p q r s t u v x y z
 . .. . ! ? * # $ % !@#$%^&*()_+
this is my current dictionary
yes it is my dictionary
ah dictionary
good gone goog goof hoof good good gone goof gone gone home home
T9 is an simple but awesome algorithm to implement.
I'm going to try and implement gui for this code. But first i need to learn Swing for it 
1 2 3 4 5 6 7 8 9 0 - = [ ]' ; , . / \ { } : " > ? <|
almost
Vocabulary Booster, Volume II
A
ASSIDUOUS (adj.) hard working, diligent
ASTUTE (adj.) smart, perceptive AUGMENT (v.) to increase in size, to swell
COMPLACENT (adj.) peaceful, easygoing
CONDONE (v.) to allow something to happen, to give approval to a questionable act CONFLAGRATION (n.) a huge fire
DOFF (v.) to take off an item of clothing
DON (v.) to put on an item of clothing
ABHOR (v.) to strongly detest or dislike
ABSTEMIOUS (adj.) sparing in food and drink
AUSPICIOUS (adj.) favorable, fortunate, boding well for the future
AUSTERE (adj.) stark, severely simple
DRACONIAN (adj.) extremely harsh, severe, oppressive
ABSTRACT (adj.) theoretical, not concrete
ACQUIESCE (v.) to agree with, to go along with
CRYPTIC (adj.) secretive, hidden, hard to understand
E
ADVERSARY (n.) opponent or enemy
ADVOCATE (v. / n.) to support / a supporter
AUTOCRATIC (adj.) having total power, dictatorial AUTONOMY (n.) independence AVARICIOUS (adj.) greedy AVUNCULAR (adj.) having the qualities of an uncle
D
EBULLIENT (adj.) extremely joyful
EDIFY (v.) to instruct, to educate EGREGIOUS (adj.) extremely bad or mistaken
ALLEVIATE (v.) to relieve, to lessen
AMBIGUOUS (adj.) unclear in meaning
DEFINITIVE (adj.) defining; held up as the ultimate example of something
DELINEATE (v.) to mark with a line (or lines)
ELOQUENT (adj.) well spoken, marked by expressive and persuasive speech
ELUSIVE (adj.) hard to capture or grasp
B
DESECRATE (v.) to violate, to make impure, to defile DESTITUTE (adj.) extremely poor, poverty stricken DETERRENT (n.) something that prevents something from happening
AMBIVALENT (adj.) torn between two conflicting emotions
AMORPHOUS (adj.) lacking a definite shape or form ANACHRONISTIC (adj.) obsolete, outdated
ANECDOTE (n.) a short story intended to instruct or amuse ARBITRARY (adj.) random, by chance
BEHEMOTH (n.) something that is huge, gigantic BENEFACTOR (n.) one who provides financial support BENEVOLENT (adj.) kind, good-hearted
EMISSARY (n.) agent or messenger
ERUDITION (n.) deep learning, scholarship
C
DETRIMENTAL (adj.) harmful DEVIOUS (adj.) tricky, crafty, unprincipled
DIATRIBE (n.) a lengthy and accusatory speech
ESCHEW (v.) to avoid ETYMOLOGY (n.) the study of word origins
EUPHEMISM (n.) a pleasant way of saying something unpleasant
EVANESCENT (adj.) vanishing quickly, fleeting
EXALTED (adj.) holding a high position, greatly respected EXEMPLARY (adj.) serving as a good example
EXONERATE (v.) to free from blame
ARCHAIC (adj.) outdated, obsolete, ancient ARTICULATE (adj.) skillful in the use of language, well-spoken ASCENDANCY (n.) the state of rising or ascending; domination ASSENT (n. / v.) agreement / to agree or consent
CANTANKEROUS (adj.) ornery, agitated, mean-spirited CASTIGATE (v.) to scold severely, berate
CAUSTIC (adj.) biting, scornful CLICHE (n.) an overused saying or expression
COLLOQUIAL (adj.) pertaining to everyday language or speech COMMEMORATE (v.) to honor the memory of
DIGRESS (v.) to turn away from the main point, to get off track DILATORY (adj.) tending to delay
DIMINUTION (n.) a decrease or diminishing
DISDAIN (v.) contempt or scorn; bitter dislike
DIVERGE (v.) to split or move apart
EXPATRIATE (n.) someone who leaves their native land to settle elsewhere
EXPEDITE (v.) to quicken, hasten
IDIOSYNCRASY (n.) odd personality trait, quirk IDOLATRY (n.) worship of false idol(s)
LP
EXTRANEOUS (adj.) extra and unnecessary
EXTRICATE (v.) to extract, free, disentangle, remove
IMMUTABLE (adj.) unable to change or be changed INCONGRUOUS (adj.) not congruent, dissimilar INCORRIGIBLE (adj.) not able to be corrected, beyond redemption
LACONIC (adj.) sparing in words
LAUD (v.) to praise LISTLESS (adj.) lacking energy LOQUACIOUS (adj.) talkative
PARSIMONY (n.) stinginess, cheapness
PECUNIARY (adj.) pertaining to money
M
PENURY (n.) poverty PERFIDIOUS (adj.) treacherous, disloyal
PERPETUAL (adj.) continuous, without end
PESSIMISM (n.) a gloomy or negative outlook PHILANTHROPIST (n.) a person who donates large sums of money to charitable causes PIECEMEAL (adj. / adv.) bit by bit / in a gradual way
PINE (v.) to miss, to long for, to yearn for
PLATITUDE (n.) overused saying, trite remark POSTERITY (n.) future generations
POTENTATE (n.) ruler, monarch, very powerful person PRECOCIOUS (adj.) characterized by early development, advanced at an early age
PRIVATION (n.) a condition or result of deprivation or loss PRODIGAL (adj.) wasteful; reckless with money PROFLIGATE (adj.) reckless in spending
PROFOUND (adj.) deep, deeply moving
PROPENSITY (n.) tendency PROTEGE (n.) a person who is groomed for a position
F
MALICE (n.) evil intent MELLIFLUOUS (adj.) smooth- flowing
MENDICANT (adj. / n.) extremely poor and given to begging / a beggar METICULOUS (adj.) paying very close attention to detail MISER (n.) a person who is extremely stingy or cheap MITIGATE (v.) to lessen or moderate the severity of something
FACILITATE (v.) to make easier FALLOW (adj.) barren, uncultivated
FEASIBLE (adj.) doable, possible, able to be accomplished FLORID (adj.) flowery FOOLHARDY (adj.) daring in a foolish way
INDIFFERENT (adj.) making no difference, not caring one way or the other
INDOMITABLE (adj.) unable to be defeated
FRIVOLOUS (adj.) lacking in importance or seriousness FURTIVE (adj.) sneaky, hidden, stealthy
INGENIOUS (adj.) pertaining to a genius; very clever INGENUOUS (adj.) genuine, honest, open
G
INHERENT (adj.) natural, innate; pertaining to the essential nature of something INNOVATION (n.) new development INSURMOUNTABLE (adj.) unable to be overcome INTRACTABLE (adj.) extremely stubborn, not able to be solved
INTREPID (adj.) brave, fearless, lacking trepidation
INVOKE (v.) to call upon
MNEMONIC (adj.) pertaining to memory
MOLLIFY (v.) to soothe, soften, pacify
GERMANE (adj.) pertinent, related to the point at hand GLUTTON (n.) habitual overeater
MOROSE (adj.) sad, gloomy MYOPIC (adj.) near sighted, lacking foresight
GRANDIOSE (adj.) overly grand GREGARIOUS (adj.) sociable GULLIBLE (adj.) unquestioning, easily fooled
N
H
J
NOXIOUS (adj.) harmful NURTURE (v.) to care for, to raise
HIERARCHY (n.) power structure
HYPERBOLE (n.) exaggeration, overstatement
JOVIAL (adj.) good natured, merry, given to joking
O
K
OPAQUE (adj.) impossible to see through
OPTIMISTIC (adj.) having a positive outlook
I
KINETIC (adj.) pertaining to motion

PROVINCIAL (adj.) pertaining to a province; narrow-minded PRUDENT (adj.) wise, marked by good judgment PUGNACIOUS (adj.) combative, tending to fight
RESPITE (n.) a brief break or rest
REVILE (v.) to hate or detest RHETORIC (n.) skillful use of language, or just language in general
TACITURN (adj.) quiet, reserved
TEMPETUOUS (adj.) of or pertaining to a tempest or storm TENACIOUS (adj.) unyielding, forceful
W
Q
RIBALD (adj.) vulgarly humorous, lewd, crude ROBUST (adj.) strong, hearty, vigorous
TENET (n.) a key belief or principle
TENTATIVE (adj.) possible but subject to change, not definite THEOLOGY (n.) the study of religion
WARY (adj.) cautious
WANE (v.) to decrease, diminish WHIMSICAL (adj.) fickle, changeable, moody
WISTFUL (adj.) filled with regret and longing
QUIESCENT (adj.) quiet, dormant, temporarily inactive
RS
RACONTEUR (n.) a person who tells witty and amusing stories RAMIFICATION (n.) a branching out; a consequence of a problematic situation
SCANT (adj.) minimal SCRUTINIZE (v.) to examine closely (visually)
SEEMLY (adj.) proper, suitable SERPENTINE (adj.) serpent- like, snake-like
TIMOROUS (adj.) timid, fearful TIRADE (n.) a lengthy and abusive verbal attack
TORPOR (n.) lack of energy, listlessness
RANCID (adj.) foul, putrid, disgusting
RANCOR (n.) anger, ill will REBUFF (v.) to snub, beat back RECTIFY (v.) to fix, correct RECTITUDE (n.) uprightness, moral virtue
SLUGGISH (adj.) slow moving, hard to arouse
SOPHOMORIC (adj.) of or pertaining to a sophomore; wise and foolish at the same time STAID (adj.) bland, boring STRIDENT (adj.) loud, harsh, shrill
TRANSCEND (v.) to surpass, go beyond
TRITE (adj.) overused, unoriginal
TRUNCATE (v.) to shorten, reduce
REDOLENT (adj.) fragrant, scented
REMEDIAL (adj.) pertaining to a remedy
U
UTOPIA (n.) a perfect place
SUBSIDIZE (v.) to assist financially
SUBTLE (adj.) not overt, nuanced, subject to fine distinctions
SUPERCILIOUS (adj.) haughty, arrogant, overly proud SUPERFLUOUS (adj.) unnecessary, extraneous SURREPTITIOUS (adj.) secretive, stealthy SYCOPHANT (n.) brown-noser, servile flatterer
V
REMISS (adj.) at fault, negligent REMUNERATIVE (adj.) resulting in monetary gain, profitable
VENERATE (v.) to hold in high regard, to greatly respect, to revere
VERACITY (n.) truthfulness VERBOSE (adj.) wordy VERDANT (adj.) lush with greenery
REPARATIONS (n.) money to be paid for injury or damage REPLETE (adj.) full of or filled with
VILIFY (v.) to make into or portray as a villain VIRULENT (adj.) poisonous, toxic
REPRIMAND (v. / n.) blame REPROACH (n.) blame, disapproval
RESCIND (v.) to take back, recall, nullify, repeal
T
VOLATILE (adj.) explosive; tending to evaporate quickly
ok

T9 Algorithm & GUI
Author: Sandeep R.V
email: r.v_sandeep@yahoo.in

My Thoughts on Implementing T9 Algorithm

What T9 is? (in short)
26 characters(A-Z) are mapped to 9 digits(1-9) to make short messaging service easier.

Input: Sequence of digits
Output: meaningful word/words,first word shown based on the frequency of usage of the word

Example:

Input: 463
output: god

Input: 4663
Output: good , gone , home , goof , hoof .

What i Have?
Dictionary.txt .

Some Cases:

1. Input as given above is a sequence of digits of a meaning full word and is known (present in the dictionary).

2. Input is a sequence of digits of a word not known.
Example:
62 => this can be na , ma , oa which in turn are prefixes of words like map, math,name , oath etc.

3. Digits in the words are used as it is.
Example: t9 => 89
Output:

1. Incase the sequence maps to a single word print the word.
	else provide the list of words used in frequently used first format.

2. Provide a list of words with prefix as entered word. 
   This is tough in case of T9 Dictionary since the words formed by using sequence of digits is unknown.

How to implement?

1. Convert words in dictionary to its numeric form.
	good => 4663
2. Map the digits to a Priority queue(Heap) with frequent word used as the most preferred.
3. Input digit sequence is used to get the word at the root of the tree. 
This solves only the case 1 where a known sequence is entered.

To implement case 2.
I can use a prefix tree (Trie) for all words in dictionary.The digit sequence of the prefixes can be used to map to a tree,
with most frequently used word with this prefix at the root.


T9GUI

The interface for T9 consists of mobile like text area and 12 buttons (0-9,*,#).

on pressing the buttons the corresponding letter should come on the text area.
On pressing 0, number corresponding to the previous sequence should be appended and space should be provided.
On pressing * the next word corresponding to the sequence should be provided as an option.

This chapter has shown that writing test cases is important. Ant makes unit testing simple by running them, capturing the results, and failing a build if a test fails. Ant’s datatypes and properties allow the classpath to be tightly controlled, directory map- pings to be overridden, and test cases to be easily isolated and run individually. This leaves one hard problem: designing realistic tests.
We recommend the following practices:
BEST PRACTICES
109
• •
• •
•
• •
•
•
• •
•
Test everything that could possibly break. This is an XP maxim and it holds.
A well-written test is hard to pass. If all your tests pass the first time, you are
probably not testing vigorously enough. Add a new test case for every bug you find.
When a test case fails, track down the problem by writing more tests, before going to the debugger. The more tests you have, the better.
Test invalid parameters to every method, rather than just valid data. Robust software needs to recognize and handle invalid data, and the tests that pass using incorrect data are often the most informative.
Clear previous test results before running new tests; delete and recreate the test results and reports directories.
Set haltonfailure="false" on <junit> to allow reporting or other steps to occur before the build fails. Capture the failure/error status in a single Ant property using errorProperty and failureProperty.
Pick a unique naming convention for test cases: *Test.java. Then you can use <batchtest> with Ant’s pattern matching facility to run only the files that match the naming convention. This helps you avoid attempting to run helper or base classes.
Separate test code from production code. Give them each their own unique direc- tory tree with the same package naming structure. This lets tests live in the same package as the objects they test, while still keeping them separate during a build.
CaptureresultsusingtheXMLformatter:<formattertype="xml"/>.
Use <junitreport>, which generates fantastic color enhanced reports to
quickly access detailed failure information.
Fail the build if an error or failure occurred: <fail if="test.failed"/>.
• Use informative names for tests. It is better to know that testDocumentLoad failed, rather than test17 failed, especially when the test suddenly breaks four months after someone in the team wrote it.
• Try to test only one thing per test method. If testDocumentLoad fails and this test method contains only one possible point of failure, it is easier to track down the bug than to try and find out which one line out of twenty the failure occurred on.
• Utilize the testing up-to-date technique shown in section 4.8. Design builds to work as subcomponents, and be sensitive to build inefficiencies doing unneces- sary work.
Writing test cases changes how we implement the code we’re trying to test, perhaps by refactoring our methods to be more easily isolated. This often leads to developing software that plays well with other modules because it is designed to work with the test case. This is effective particularly with database and container dependencies because it forces us to decouple core business logic from that of a database, a web container, or other frameworks. Writing test cases may actually improve the design of our production code. In particular, if you cannot write a test case for a class, you have a serious problem, as it means you have written untestable code.
Hope is not lost if you are attempting to add testing to a large system that was built without unit tests in place. Do not attempt to retrofit test cases for the existing code in one big go. Before adding new code, write tests to validate the current behavior and verify that the new code does not break this behavior. When a bug is found, write a test case to identify it clearly, then fix the bug and watch the test pass. While some test- ing is better than no testing, a critical mass of tests needs to be in place to truly realize such XP benefits as fearless and confident refactoring. Keep at it and the tests will accu- mulate allowing the project to realize these and other benefits.
4.10 SUMMARY
Unit testing makes the world a better place because it gives us the knowledge of a change’s impact and the confidence to refactor without fear of breaking code unknowingly. Here are some key points to keep in mind:
• JUnit is Java’s de facto testing framework; it integrates tightly with Ant.
• <junit> runs tests cases, captures results, and can set a property if tests fail.
• Information can be passed from Ant to test cases via <sysproperty>.
• <junitreport> generates HTML test results reports, and allows for custom- ization of the reports generated via XSLT.
Now that you’ve gotten Ant fundamentals down for compiling, using datatypes and properties, and testing, we move to executing Java and native programs from within Ant.
110
CHAPTER 4 TESTING WITH JUNIT
100 questions for Advanced Algorithms

1.	Explain the O asymptotic notation
2.	Explain the Ω asymptotic notation
3.	Explain the Θ asymptotic notation.
4.	Show that for any real constants a and b, where b > 0, .
5.	Explain the Master theorem.
6.	Give solution to the recurrence relation: for n>1,  .
7.	Give solution to the recurrence relation: .
8.	Arrange the following function in increasing order of growth rate:  ,  ,  ,  ,  ,  .
9.	Compute the following sum:  
10.	Find the order of growth of  
11.	Prove that  by mathematical induction.
12.	Set up and solve a recurrence relation for the number of calls made by , the recursive algorithm for computing n!
13.	Design an algorithm that computes the nth Fibonacci number recursively.
14.	Explain the 3 different types of amortized analysis.
15.	Explain how to do amortized analysis using Aggregate analysis on the Multipop stack.
16.	Explain how to do amortized analysis using Aggregate analysis on incrementing a binary counter.
17.	Explain how to do amortized analysis using the Accounting method on the Multipop stack.
18.	Explain how to do amortized analysis using the Accounting method on incrementing a binary counter.
19.	Explain how to do amortized analysis using the Potential method on the Multipop stack.
20.	Explain how to do amortized analysis using the Potential method on incrementing a binary counter.
21.	Compare the preprocessing and matching times of Naïve, Rabin-Karp, Finite Automaton and Knuth-Morris-Pratt algorithms.
22.	Explain the working of the Naïve string matching algorithm.
23.	Show the comparisons the naïve string matcher makes for pattern P = 0001 in the text T = 000010001010001.
24.	Suppose that all the characters in the pattern P are different. Show how to accelerate the naïve string matching algorithm to run in time  on an n-character text.
25.	Explain the working of the Rabin-Karp string matching algorithm.
26.	Working modulo q = 11, how many spurious hits does the Rabin-Karp matcher encounter with the text T = 3141592653589793 when looking for the pattern P = 26?
27.	Show how to extend the Rabin-Karp method to handle the problem of looking for a given   pattern in an   array of characters.
28.	Explain the working of the Finite Automaton string matching algorithm.
29.	Construct the string-matching automaton for the pattern P=aabab and illustrate its operation on the text string T = aaababaabaababaab.
30.	Draw a state transition diagram for the string-matching automaton for the pattern ababbabbababbababbabb over the alphabet  .
31.	Given two patterns P and  , describe how to construct a finite automaton that determines all the occurrences of either pattern. Try to minimize the number of states in your automaton.
32.	Explain the working of the Knuth-Morris-Pratt string matching algorithm.
33.	Compute the prefix function π for the pattern ababbabbabbababbabb when the alphabet is  .
34.	Give an upperbound on the size  as a function of q. Give an example to show that your bound is tight.
35.	Explain how to determine the occurrences of pattern P in the text T by examining the π function for the string PT (the string of length m+n that is the concatenation of P and T).
36.	Explain the working of the Boyer-Moore string matching algorithm.
37.	Apply Boyer-Moore algorithm to search for the pattern AT_THAT in the text WHICH_FINALLY_HALTS.__AT_THAT.
38.	Explain the working of the Euclid’s algorithm for finding the GCD of 2 numbers.
39.	Prove that for all integers a, k and n, .
40.	Explain the working of the modular Linear equation solver algorithm.
41.	State and explain the Chinese remainder theorem.
42.	Explain how to efficiently compute the nth power of a.
43.	Explain the steps used in the RSA cryptosystem.
44.	Explain the randomized Miller-Rabin randomized primality test.
45.	Prove that there are infinitely many primes.
46.	Prove that if p is prime and  , then  .
47.	Explain Pollard’s rho heuristic for integer factorization.
48.	Explain Prefix codes.
49.	Write the algorithm for constructing a Huffman code for given frequencies of characters in the alphabet using Greedy Technique.
50.	Give the proof of correctness of Huffman algorithm.
51.	What is an optimal Huffman code for the following set of frequencies, based on the first 8 Fibonacci numbers: a:1, b:1, c:2, d:3, e:5, f:8, g:13, h:21.
52.	Prove that if we order the characters in an alphabet so that their frequencies and monotonically decreasing, then there exists an optimal code whose codeword lengths are monotonically increasing.
53.	Explain the two representations of polynomials.
54.	Multiply the polynomials  and .
55.	Prove that for any vertex v other than the source or the sink, the total positive flow entering v must equal the total positive flow leaving v.
56.	Explain how the Bellman-Ford algorithm solves the single-source shortest-path problem in which the weights may be negative.
57.	Explain how single source shortest paths can be found in directed acyclic graphs.
58.	Explain Johnson’s algorithm for finding out shortest paths between all pairs of vertices in a sparse graph.
59.	Explain the maximum-flow problem.
60.	Explain the Ford-Fulkerson method for solving a maximum-flow problem.
61.	Prove that for any pair of vertices u and v and any capacity and flow functions c and f, we have  .
62.	Explain how to find out maximum bipartite matching in a given graph.
63.	Explain how vectors are represented in C++.
64.	Explain how points are represented in C++.
65.	Explain how a polygon is represented in C++.
66.	Explain how edges are represented in C++.
67.	Explain how to find the intersection of a line and a triangle.
68.	What is a star shaped polygon?
69.	What is a convex polygon? 
70.	Give the different parts of a convex polygon.
71.	Show that  equals the signed area of the parallelogram determined by the vectors   and .
72.	Given nonzero vectors a and b, show that  , where θ is the angle between vectors a and b.
73.	Explain how to find star shaped polygons.
74.	Explain how to compute convex hulls using in incremental insertion.
75.	Explain how to check whether a point lies within a polygon or not by the ray shooting technique.
76.	Explain how to check whether a point lies within a polygon or not by the signed angle technique.
77.	Explain the Cyrus-Beck algorithm for clipping a line.
78.	What are the advantages and disadvantages of the Cyrus-Beck algorithm for clipping a line?
79.	Explain the Sutherland-Hodgeman algorithm for clipping a polygon.
80.	What are the advantages and disadvantages of the Sutherland-Hodgeman algorithm for clipping a polygon.
81.	Explain what a monotone polygon is.
82.	Explain how monotone polygons can be triangulated.
83.	Explain the Gift wrapping technique for constructing a convex hull.
84.	Explain the Graham’s scan technique for constructing a convex hull.
85.	Explain how hidden surfaces can be removed using Depth sorting or Painter’s algorithm.
86.	Explain how hidden surfaces can be removed using the z-buffer algorithm.
87.	How is a non-monotone polygon broken into monotone pieces?
88.	Write notes about the intersection of two convex objects.
89.	Prove that the intersection of two convex sets is also convex.
90.	Write a function that decides whether a polygon is convex.
91.	Write a function to determine whether a given diagonal of a given polygon is a chord.
92.	Devise an algorithm to decide whether a point belongs to an arbitrary (convex or not) n-gon that runs in  time.
93.	The intersection detection problem for a set S on n line segments is to determine whether there exists a pair of segments in S that intersect. Give a plane sweep algorithm that solves this problem in   time.
94.	The diameter of a point set is the maximum distance between any pair of points. Show that the diameter is realized by a pair of extreme points.
95.	Give a time algorithm for computing the diameter of a set of n points in the plane.
96.	Devise a plane sweep algorithm for computing the area of the union of a collection of axes-parallel rectangles.
97.	Design an algorithm to report all intersection points among a set of n horizontal and vertical line segments in the plane. The algorithm should run in  time, where r intersections are reported.
98.	Given two convex polygon P and Q, devise a plane-sweep algorithm to compute the intersection of P and Q in time proportional to |P|+|Q|. 
99.	Devise an  time plane sweep algorithm for triangulating an arbitrary polygon.
100.	Write a function to determine whether two triangles in space intersect.

alright brilliant